"asyncapi: '2.6.0'\nid: 'urn:asyncapi:example:async-demo'\ndefaultContentType: application/json\ninfo: \n  title: Async Demo - API Gateway -> SQS -> Lambda\n  version: '1.0.0'\n  description: |\n    Flow: API Gateway HTTP POST /demo accepts a JSON payload, validates it,\n    sends the message to a standard SQS queue async-demo-sqs (DLQ async-demo-sqs-dlq).\n    A Lambda function worker-function consumes messages from the SQS queue,\n    analyzes text and stores results in MongoDB.\n    \nservers:\n  apiGateway:\n    url: https://ch65sfidhj.execute-api.us-east-1.amazonaws.com\n    protocol: https\n    description: API Gateway endpoint that accepts POST /demo\n  awsSqs:\n    url: sqs://async-demo-sqs\n    protocol: sqs\n    description: Standard SQS queue used for async-demo\n    \nchannels:\n  /demo:\n    description: HTTP endpoint on API Gateway that accepts the incoming request payload\n    publish:\n      summary: Client posts new message to API Gateway\n      operationId: receiveDemoRequest\n      bindings:\n        http:\n          type: request\n      message:\n        $ref: '#/components/messages/IncomingRequest'\n\n  sqs/async-demo-sqs:\n    description: SQS queue channel where validated requests are sent; worker-function subscribes\n    subscribe:\n      summary: worker-function consumes messages from the SQS queue\n      operationId: consumeFromAsyncDemoSqs\n      bindings:\n        sqs:\n          queue: async-demo-sqs\n          region: us-east-1\n          fifo: false\n          visibilityTimeout: 30\n          deadLetterQueue:\n            name: async-demo-sqs-dlq\n      message:\n        $ref: '#/components/messages/QueueMessage'\n        \n        \ncomponents:\n  messages:\n    IncomingRequest:\n      name: incomingRequest\n      title: Incoming request posted to /demo\n      contentType: application/json\n      correlationId:\n        $ref: '#/components/correlationIds/userCorrelation'\n      payload:\n        $ref: '#/components/schemas/RequestPayload'\n      examples:\n        - name: example1\n          payload:\n            groupId: \"f0e9d8c7-b6a5-4321-fedc-ba9876543210\"\n            userId: \"12345678-abcd-ef01-2345-6789abcdef01\"\n            text: \"That's awesome!\"\n\n\n    QueueMessage:\n      name: queueMessage\n      title: Message placed on async-demo-sqs\n      contentType: application/json\n      correlationId:\n        $ref: '#/components/correlationIds/userCorrelation'\n      payload:\n        $ref: '#/components/schemas/QueuePayload'\n      examples:\n        - name: queuedExample\n          payload:\n            messageId: \"9c8b7a6d-0000-1111-2222-333344445555\"\n            receivedAt: \"2025-10-16T00:00:00Z\"\n            request:\n              groupId: \"f0e9d8c7-b6a5-4321-fedc-ba9876543210\"\n              userId: \"12345678-abcd-ef01-2345-6789abcdef01\"\n              text: \"That's awesome!\"\n\n\n  schemas:\n    RequestPayload:\n      type: object\n      required:\n        - groupId\n        - userId\n        - text\n      properties:\n        groupId:\n          type: string\n          format: uuid\n          description: Group identifier\n        userId:\n          type: string\n          format: uuid\n          description: User identifier used as correlation id\n        text:\n          type: string\n          description: Text to analyze\n    QueuePayload:\n      type: object\n      required:\n        - messageId\n        - receivedAt\n        - request\n      properties:\n        messageId:\n          type: string\n          description: Unique message id assigned before enqueue\n        receivedAt:\n          type: string\n          format: date-time\n          description: Time when message was enqueued\n        request:\n          $ref: '#/components/schemas/RequestPayload'\n    AnalysisResult:\n      type: object\n      required:\n        - messageId\n        - analysis\n        - storedAt\n      properties:\n        messageId:\n          type: string\n          description: Source message id (from queue)\n        analysis:\n          type: object\n          properties:\n            sentiment:\n              type: string\n              enum: [positive, neutral, negative]\n            score:\n              type: number\n            keywords:\n              type: array\n              items:\n                type: string\n        storedAt:\n          type: string\n          format: date-time\n          description: When record stored in MongoDB\n\n  correlationIds:\n    userCorrelation:\n      description: Correlation id that uses the request's userId field for end-to-end tracing\n      location: $message.payload#/userId"